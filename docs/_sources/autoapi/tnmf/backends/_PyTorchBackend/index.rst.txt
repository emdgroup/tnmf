:orphan:

:mod:`tnmf.backends._PyTorchBackend`
====================================

.. py:module:: tnmf.backends._PyTorchBackend

.. autoapi-nested-parse::

   A module that provides some specializations and utilities for all PyTorch based backends.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   tnmf.backends._PyTorchBackend.PyTorchBackend




.. class:: PyTorchBackend(**kwargs)


   Bases: :py:obj:`tnmf.backends._Backend.Backend`

   The parent class for all PyTorch based backends.

   They provide the functionality to evaluate the gradients of the factorization model via automatic differentiation
   using :mod:`torch.autograd`.

   .. method:: to_ndarray(arr: torch.Tensor) -> numpy.ndarray
      :staticmethod:


   .. method:: convolve_multi_1d(arr: torch.Tensor, kernels: Tuple[numpy.ndarray, Ellipsis], axes: Tuple[int, Ellipsis]) -> torch.Tensor
      :staticmethod:


   .. method:: normalize(arr: torch.Tensor, axis: Optional[Union[int, Tuple[int, Ellipsis]]] = None)
      :staticmethod:


   .. method:: reconstruction_gradient_W(self, V: numpy.ndarray, W: torch.Tensor, H: torch.Tensor, s: slice = sliceNone) -> Tuple[torch.Tensor, torch.Tensor]


   .. method:: reconstruction_gradient_H(self, V: numpy.ndarray, W: torch.Tensor, H: torch.Tensor, s: slice = sliceNone) -> Tuple[torch.Tensor, torch.Tensor]


   .. method:: reconstruction_energy(self, V: torch.Tensor, W: torch.Tensor, H: torch.Tensor) -> float



